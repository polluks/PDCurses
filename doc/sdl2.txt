SDL2 Considerations
===================

Clipboard
---------

SDL2 port uses functionality provided by the SDL2 clipboard functions to add 
basic clipboard support.


Fonts
-----

If the PDC_WIDE flag is set, SDL2 version uses SDL2_ttf and SDL version 
uses SDL_ttf to render fonts.  This allows for use of a full UCS-2 (16 bit 
Unicode) character set.

SDL2 has several changes from SDL on how to handle Unicode character input 
including the addition of SDL_TEXTINPUT event and new functions to use with it.  
This allows use of an input method editor to enter characters that may not be 
standard for the keyboard.  For simplicity, the pdcurses SDL_ttf additions 
don't use this new added functionality.  They take an approach that will work 
with SDL or SDL2.  Windows users may be familiar with holding down the alt key 
while entering a numeric value via the keypad.  Windows translates this input 
and the number into a character.  The SDL ports with PDC_WIDE option use a 
similar technique across all platforms not just Windows.  

To enter a hexidecimal value for a character, hold down the alt key and press 
plus on the numeric keypad.  Then, enter the hexidecimal code for the   
character.  Then, release the alt key.  To enter a decimal number, hold down 
the alt key and press 0 on the keypad, followed by the decimal equivalent of 
the character.  Release the alt key.  This allows users to enter characters not
available on their keyboards without need for additional code or programs to 
deal with input.

The default Truetype font used is a monospaced font.  One can specify another
font using the integration methods described.  The font does not necessarily 
need to be a monospaced font.  Since PDCurses assumes a fixed size (default 
screen size is 80x25), a monospaced font may look better on screen than other 
types of fonts.


Integration with SDL2 and SDL2_TTF or SDL_TTF
---------------------------------------------

As mentioned in SDL Considerations document, the SDL port uses the following 
variables:

 PDCEX SDL_Surface *pdc_screen, *pdc_font, *pdc_icon, *pdc_back;
 PDCEX int pdc_sheight, pdc_swidth, pdc_yoffset, pdc_xoffset;

The SDL2 port adds:

  SDL_Window *pdc_window;
  SDL_Renderer *pdc_render;
  SDL_Texture *pdc_texture;
  
Using SDL_ttf (with SDL2 or SDL) adds:  

  TTF_Font *pdc_ttffont;
  SDL_Color *pdc_ttffont_foregroundcolor;
  SDL_Color *pdc_ttffont_backgroundcolor;
  int pdc_ttffont_spointsz;
  int pdc_ttffont_hint;
  
These can be used or modified in your own code.  Like the pdc_screen variable
used by the SDL port, you can initialize pdc_window, pdc_render, 
pdc_texture in your own code.  If it's not initialized, PDCurses will do
it for you.  See the sdltest demo for an example.  If PDCurses is built with
the PDC_WIDE flag, it will clean up/deallocate these variables on exit when 
needed.

Default font for SDL_TTF is assumed to be DejaVuSansMono.ttf from the Open 
Source DejaVu fonts.  The code looks for this font to already be installed in
a standard directory (based on the Filesystem Hierarchy Standard) 
/usr/local/share/fonts/truetype/dejavu/.  This can be modified by setting a 
define during compile time 
( -DPDC_FONT_PATH=/usr/share/fonts/truetype/dejavu/ ) This can be overridden 
by initializing pdc_ttffont in your own code.  Similar to the 
PDC_FONT environment variable for SDL bitmap fonts, one can also override TTF 
fonts using the PDC_FONT and PDC_FONT_POINT_SIZE environment variables.

How a font is rendered on the screen depends on a number of factors.  
TTF_SetFontHinting (from SDL_TTF or SDL2_TTF) uses the pdc_ttffont_hint setting 
which can affect how the font appears on the screen.  Default for PDCurses is 
currently TTF_HINTING_MONO, but one can also use TTF_HINTING_NORMAL, 
TTF_HINTING_LIGHT, TTF_HINTING_NONE by setting pdc_ttffont_hint before 
PDCurses initializes pdc_ttffont.  If you initialize pdc_ttffont in your own 
code, TTF_SetFontHinting is not called by PDCurses and the default setting is 
TTF_HINTING_NORMAL.  This can always be changed in your own code by calling
TTF_SetFontHinting.  The font is also affected by the settings used when 
building the freetype library (which SDL_TTF or SDL2_TTF uses).  For example, 
on Windows, one may want to add the following compile time flags when building 
the freetype library:
-DTT_CONFIG_OPTION_SUBPIXEL_HINTING -DFT_CONFIG_OPTION_SUBPIXEL_RENDERING
Some testing was done building freetype with and without harfbuzz library and 
that did not seem to affect TTF rendering.  (Harfbuzz mainly relates to 
OpenType fonts, OTF rendering.)


SDL2 and SDL_TTF modifications were added by Laura Michaels in 2015.
SDL2 and SDL_TTF modifications are licensed using the Creative Commons license
CC0 ( https://creativecommons.org/publicdomain/zero/1.0/ ).
